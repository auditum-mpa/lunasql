/**
 * name         : decision-tree
 * description  : NodeJS implementation of decision tree using ID3 algorithm
 * author       : Ankit Kuwadekar,
 * version      : 0.2.1,
 * homepage  : https://github.com/serendipious/nodejs-decision-tree-id3
 * license       : ./blob/master/LICENSE
    Copyright (c) 2014, Ankit Kuwadekar, All rights reserved.
 */
function Decision(e,t,n){this.data=e;this.target=t;this.features=n;this.model=createTree(e,t,n)}function createTree(e,t,n){var r=_.unique(_.pluck(e,t));if(r.length==1){return{type:"result",val:r[0],name:r[0],alias:r[0]+randomTag()}}if(n.length==0){var i=mostCommon(r);return{type:"result",val:i,name:i,alias:i+randomTag()}}var s=maxGain(e,t,n);var o=_.without(n,s);var u=_.unique(_.pluck(e,s));var a={name:s,alias:s+randomTag()};a.type="feature";a.vals=_.map(u,function(n){var r=e.filter(function(e){return e[s]==n});var i={name:n,alias:n+randomTag(),type:"feature_value"};i.child=createTree(r,t,o);return i});return a}function entropy(e){var t=_.unique(e);var n=t.map(function(t){return prob(t,e)});var r=n.map(function(e){return-e*log2(e)});return r.reduce(function(e,t){return e+t},0)}function gain(e,t,n){var r=_.unique(_.pluck(e,n));var i=entropy(_.pluck(e,t));var s=_.size(e);var o=r.map(function(r){var i=e.filter(function(e){return e[n]===r});return i.length/s*entropy(_.pluck(i,t))});var u=o.reduce(function(e,t){return e+t},0);return i-u}function maxGain(e,t,n){return _.max(n,function(n){return gain(e,t,n)})}function prob(e,t){var n=_.filter(t,function(t){return t===e}).length;var r=t.length;return n/r}function log2(e){return Math.log(e)/Math.log(2)}function mostCommon(e){return _.sortBy(e,function(t){return count(t,e)}).reverse()[0]}function count(e,t){return _.filter(t,function(t){return t===e}).length}function randomTag(){return"_r"+Math.round(Math.random()*1e6).toString()}Decision.prototype={predict:function(e){var t=this.model;while(t.type!=="result"){var n=t.name;var r=e[n];var i=_.detect(t.vals,function(e){return e.name==r});t=i.child}return t.val},evaluate:function(e){var t=this;var n=this.target;var r=0;var i=0;_.each(e,function(e){r++;var s=t.predict(e);var o=e[n];if(s==o){i++}});return i/r}};
